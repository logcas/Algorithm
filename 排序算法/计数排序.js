// 计数排序
// ----------------------------------------------------------------------------
// 计数排序适用于一些范围区间很小的数据排序，
// 例如学生成绩（如0-100)，年龄（也是如0-120）这样的一些数据
// 同时，计数排序的数据只能是非负整数
// 如果当中有负数，例如[-5,15,2,-2,0]这样的数据，则转化为 => [0, 20, 7, 3, 3]再进行排序
// 如果有小数，则同时乘以相同的倍数，转化为整数


// 栗子
// -----------------------------------------------------------------------------
// 假设有一组学生成绩，为了简化，这些成绩的范围为[0, 5]
// 数据是这样的 A[] = [1,2,3,5,4,1,2,0,3,5,5,0,4,1,2,0,5,1,3,5,4,0]
// -----------------------------------------------------------------------------
// 1. 先进行一轮遍历，产生一个数组R[] = [4, 4, 3, 3, 3, 5]
//    数组R[]的下标表示分数，例如，R[0] = 4表示 得 0 分的人有4位
// 2. 对数组R[]的每一项，进行这样的操作：R[N] = R[N] + R[N - 1]
//    得到新的数组R[] = [4, 8, 11, 14, 17, 22]
//    数组R[]的下表同样是表示分数，但 R[1] = 8 表示的是“分数小于或等于1”的同学有8位
// 3. 接下来，就要开始排序了
//    从数组可以知道，本次排序的数据大小为22，这里令 len = 22
//    同时，建立一个数组 P[]，长度为22。
// 4. 遍历A[]
//   4.1 当找到A[0] = 1时，此时R[1] = 8，令P[8 - 1] = 1，R[1] = R[1] - 1
//        这时，P[] = [_, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _]
//             R[] = [4, 7, 11, 14, 17, 22]
//   4.2 当找到A[1] = 2时，此时R[2] = 11，令P[11 - 1] = 2，R[2] = R[2] - 1
//        这时，P[] = [_, _, _, _, _, _, _, 1, _, _, 2, _, _, _, _, _, _, _, _, _, _, _]
//             R[] = [4, 7, 10, 14, 17, 22]
//   4.3 不断执行上述的过程
//        最终，P[] = [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5]
//             R[] = [0, 0, 0, 0, 0, 0]

// 代码
// -----------------------------------------------------------------------------
//

function countSort(A) {
  // 先找出数组A[]的最大值
  let max = A[0];
  for(let i = 0;i < A.length; ++i) {
    if(max < A[i]) max = A[i];
  }
  // 然后定义R[]
  let R = [];
  for(let i = 0;i < max + 1; ++i) {
    R[i] = 0;
  }
  // 统计对应下标数值的个数
  for(let i = 0;i < A.length; ++i) {
    R[A[i]]++;
  }
  // 执行R[i] = R[i - 1] + R[i];
  for(let i = 1;i < R.length; ++i) {
    R[i] = R[i - 1] + R[i];
  }
  // 申请一个最终数组，存放排序好的元素
  let P = [];
  // 再次遍历A[]，执行计数排序过程
  for(let i = 0;i < A.length; ++i) {
    let t = A[i];
    P[R[t] - 1] = t;
    R[t] = R[t] - 1;
  }
  return P;
}

let res = countSort([1,2,3,5,4,1,2,0,3,5,5,0,4,1,2,0,5,1,3,5,4,0]);
console.log(res);